// Mocks generated by Mockito 5.4.4 from annotations
// in weather/test/test_data/test_generator.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i18;
import 'dart:typed_data' as _i19;

import 'package:dartz/dartz.dart' as _i2;
import 'package:hive/hive.dart' as _i16;
import 'package:http/http.dart' as _i5;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;
import 'package:weather/cores/env_data_loader.dart' as _i15;
import 'package:weather/cores/failure/failure.dart' as _i8;
import 'package:weather/cores/network/network_info.dart' as _i13;
import 'package:weather/features/weather/data/data_sources/local_weather_data_source.dart'
    as _i14;
import 'package:weather/features/weather/data/data_sources/remote_weather_data_source.dart'
    as _i12;
import 'package:weather/features/weather/data/models/coordinate_model.dart'
    as _i4;
import 'package:weather/features/weather/data/models/full_weather_model.dart'
    as _i3;
import 'package:weather/features/weather/domain/entities/coordinate_entity.dart'
    as _i10;
import 'package:weather/features/weather/domain/entities/full_weather_entity.dart'
    as _i9;
import 'package:weather/features/weather/domain/repositories/get_weather_repository.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFullWeatherModel_2 extends _i1.SmartFake
    implements _i3.FullWeatherModel {
  _FakeFullWeatherModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoordinateModel_3 extends _i1.SmartFake
    implements _i4.CoordinateModel {
  _FakeCoordinateModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetWeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeatherRepository extends _i1.Mock
    implements _i6.GetWeatherRepository {
  MockGetWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i9.FullWeatherEntity>>
      getWeatherByAbsoluteLocation(_i10.CoordinateEntity? coord) =>
          (super.noSuchMethod(
            Invocation.method(
              #getWeatherByAbsoluteLocation,
              [coord],
            ),
            returnValue: _i7
                .Future<_i2.Either<_i8.Failure, _i9.FullWeatherEntity>>.value(
                _FakeEither_0<_i8.Failure, _i9.FullWeatherEntity>(
              this,
              Invocation.method(
                #getWeatherByAbsoluteLocation,
                [coord],
              ),
            )),
          ) as _i7.Future<_i2.Either<_i8.Failure, _i9.FullWeatherEntity>>);

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i9.FullWeatherEntity>>
      getWeatherByCityName(String? cityName) => (super.noSuchMethod(
            Invocation.method(
              #getWeatherByCityName,
              [cityName],
            ),
            returnValue: _i7
                .Future<_i2.Either<_i8.Failure, _i9.FullWeatherEntity>>.value(
                _FakeEither_0<_i8.Failure, _i9.FullWeatherEntity>(
              this,
              Invocation.method(
                #getWeatherByCityName,
                [cityName],
              ),
            )),
          ) as _i7.Future<_i2.Either<_i8.Failure, _i9.FullWeatherEntity>>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i11.InternetConnectionChecker {
  MockInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  _i7.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<_i11.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i7.Future<_i11.InternetConnectionStatus>.value(
            _i11.InternetConnectionStatus.connected),
      ) as _i7.Future<_i11.InternetConnectionStatus>);

  @override
  _i7.Stream<_i11.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i7.Stream<_i11.InternetConnectionStatus>.empty(),
      ) as _i7.Stream<_i11.InternetConnectionStatus>);
}

/// A class which mocks [RemoteWeatherDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteWeatherDataSource extends _i1.Mock
    implements _i12.RemoteWeatherDataSource {
  MockRemoteWeatherDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.FullWeatherModel> getWeatherByCityName(String? cityName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherByCityName,
          [cityName],
        ),
        returnValue:
            _i7.Future<_i3.FullWeatherModel>.value(_FakeFullWeatherModel_2(
          this,
          Invocation.method(
            #getWeatherByCityName,
            [cityName],
          ),
        )),
      ) as _i7.Future<_i3.FullWeatherModel>);

  @override
  _i7.Future<_i3.FullWeatherModel> getWeatherByAbsLocation(
          _i4.CoordinateModel? coord) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherByAbsLocation,
          [coord],
        ),
        returnValue:
            _i7.Future<_i3.FullWeatherModel>.value(_FakeFullWeatherModel_2(
          this,
          Invocation.method(
            #getWeatherByAbsLocation,
            [coord],
          ),
        )),
      ) as _i7.Future<_i3.FullWeatherModel>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i13.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [LocalWeatherDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalWeatherDataSource extends _i1.Mock
    implements _i14.LocalWeatherDataSource {
  MockLocalWeatherDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FullWeatherModel getLoadedWeather() => (super.noSuchMethod(
        Invocation.method(
          #getLoadedWeather,
          [],
        ),
        returnValue: _FakeFullWeatherModel_2(
          this,
          Invocation.method(
            #getLoadedWeather,
            [],
          ),
        ),
      ) as _i3.FullWeatherModel);

  @override
  _i4.CoordinateModel getLastCoordinate() => (super.noSuchMethod(
        Invocation.method(
          #getLastCoordinate,
          [],
        ),
        returnValue: _FakeCoordinateModel_3(
          this,
          Invocation.method(
            #getLastCoordinate,
            [],
          ),
        ),
      ) as _i4.CoordinateModel);

  @override
  int getLastTime() => (super.noSuchMethod(
        Invocation.method(
          #getLastTime,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  bool saveWeather(_i3.FullWeatherModel? weather) => (super.noSuchMethod(
        Invocation.method(
          #saveWeather,
          [weather],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool saveDate() => (super.noSuchMethod(
        Invocation.method(
          #saveDate,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool saveCoordinate(_i4.CoordinateModel? coord) => (super.noSuchMethod(
        Invocation.method(
          #saveCoordinate,
          [coord],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool shouldRelod(_i4.CoordinateModel? coord) => (super.noSuchMethod(
        Invocation.method(
          #shouldRelod,
          [coord],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [EnvDataLoader].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnvDataLoader extends _i1.Mock implements _i15.EnvDataLoader {
  MockEnvDataLoader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<String?> getBaseUrl() => (super.noSuchMethod(
        Invocation.method(
          #getBaseUrl,
          [],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<String?> getApiKey() => (super.noSuchMethod(
        Invocation.method(
          #getApiKey,
          [],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i16.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);

  @override
  bool get lazy => (super.noSuchMethod(
        Invocation.getter(#lazy),
        returnValue: false,
      ) as bool);

  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  Iterable<E> valuesBetween({
    dynamic startKey,
    dynamic endKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #valuesBetween,
          [],
          {
            #startKey: startKey,
            #endKey: endKey,
          },
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  E? getAt(int? index) => (super.noSuchMethod(Invocation.method(
        #getAt,
        [index],
      )) as E?);

  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, E>{},
      ) as Map<dynamic, E>);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(Invocation.method(
        #keyAt,
        [index],
      ));

  @override
  _i7.Stream<_i16.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i7.Stream<_i16.BoxEvent>.empty(),
      ) as _i7.Stream<_i16.BoxEvent>);

  @override
  bool containsKey(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> put(
    dynamic key,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> putAt(
    int? index,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            value,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [entries],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<int> add(E? value) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<Iterable<int>> addAll(Iterable<E>? values) => (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [values],
        ),
        returnValue: _i7.Future<Iterable<int>>.value(<int>[]),
      ) as _i7.Future<Iterable<int>>);

  @override
  _i7.Future<void> delete(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [index],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> compact() => (super.noSuchMethod(
        Invocation.method(
          #compact,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<int> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i18.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i18.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i18.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i18.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i19.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i19.Uint8List>.value(_i19.Uint8List(0)),
      ) as _i7.Future<_i19.Uint8List>);

  @override
  _i7.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_5(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i5.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
